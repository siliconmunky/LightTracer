////////////////////////////////////////////////////////////////////////////////
// Filename: color.ps
////////////////////////////////////////////////////////////////////////////////

struct tPixel
{
    float4 mColour;
};

StructuredBuffer<tPixel> ComputeOutputBuffer : register(t0);

cbuffer ConstantBuffer : register(b0)
{
    int gWidth;
    int gHeight;
};




struct PixelInputType
{
    float4 position : SV_POSITION;
	float2 uv	: TEXCOORD;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ColorPixelShader(PixelInputType input) : SV_TARGET
{
	float2 uv = input.uv;

	uint index = (int)(uv.x * gWidth) + (int)(uv.y * gHeight) * gWidth;

	float4 result;
	result.rgb = ComputeOutputBuffer[index].mColour.rgb;
	result.a = 0.1;

    return result;
}
